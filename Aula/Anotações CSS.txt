Creating & Linking a CSS Stylesheet

Para começar, antes head do nosso html, criamos uma tag <link>, conforme ex:
<head>
	<link rel="stylesheet" type="text/css" href="../..">
	//os atributos preenchidos são obrigatórios
	//Os ".." representam diretório e nome do arquivo css, respectivamente.
</head>


How to test a stylesheet

Para começar, o mais básico é escolher uma tag e formatá-la pra ver se referenciamos o arquivo corretamente

Exemplo:
//No HTML
<link rel="stylesheet" type="text/css" href="css/style.css">
<head>

//No css

body{
    background: red;
}

*Notou-se que - ao referenciar o arquivo, referenciei uma pasta que 
eu sequer tinha e disse que o arquivo estava lá dentro
Assim, o background não ficou vermelho. Bastou então remover
o diretório e ficou assim:
<link rel="stylesheet" type="text/css" href="style.css">


What is a selector?

Seletores são meios de pegar algum elemente delimitado por tag no html 
e estilizá-lo

Essa é uma maneira mais genérica de fazer essa seleção.

Sendo assim, temos os class selectors; usados para editar um
elemento de uma dada classe.

Por fim, temos a seleção por id:
Nela, podemos - assim como na classe - selecionar e editar
elementos baseados em um id atribuído aos mesmos no HTML

Contudo, diferente das classes, pode-se usar esse método com um elemento de cada vez.
Além disso, devemos - no css - aplicar # antes de fazer as alterações.

Ex:

//No HTML
<p id="sometext">Some text.</p>
<p id="sometext">Some more text.</p>

//No CSS

#sometext{
	color:orange
}


Classes & ID's in HTML


Para estilizar uma classe, use o prefixo "."_ nome da classe, como abaixo:

//No HTML
<h1 class="titulo">Olá Mundo</h1>
//No CSS
.titulo{
	color:blue;
}


*Vale lembrar que ao nomear uma classe ou ID,
temos a boa prática de colocar hífen no nome, como:
<h1 class="titulo-teste">Teste</h1>


Specitficity & When to use Selectors

Mais infos em:https://www.w3schools.com/css/css_specificity.asp


Pseudoselectors

Os pseudoselectors são como atributos que colocamos em uma tag HTML, só que no CSS.

Exemplo de Estrutura:
h2:hover{ //após o h2 encontra-se um dos pseudoselectors
	color:red;
}

Como visto no exemplo acima, o pseudoselector hover é responsável por alguma ação ao passar o 
mouse por cima da tag que está sendo estilizada por esse CSS.

Nesse caso, podemos - por ex - colcoar uma cor diferente para quando estiver fora do hover
criando uma classe para a mesma tag, de forma a sobrescrever o estilo anterior,
conforme o tópico da especifidade dos seletores.

Assim, teriamos algo como:
h2:hover{
	color:red;
}
//classe sem o hover
.no-hover{
	color:blue;
}

O output dessa implementação seria o elemento com a classe 
no-hover seria azul o tempo todo, a menos que passassemos o mouse
em cima, de forma a torná-lo temporariamente vermelho.

Temos também pseudoselectors para tags child (contidas), como em ul.

Digamos que temos uma lista como essa:

<ul>	//parent
	<li>Criança1</li> 	//first-child
	<li>Criança2</li>	//second-child
	<li>Criança3</li>	//last-child
</ul>


Para estilizar individualmente cada criança, usamos um pseudoselector correspondente,
conforme CSS abaixo:

//Personalizando a Criança1

li:first-child{
	color:blue;
}


Agora, a Criança1 será a única pintada de algo na página


Lembre-se que a última child tag deve ser chamada de last-child no pseudoselector


Há também o pseudoselector nth-child, responsável por selecionar uma dada child colocada como argumento

Exemplo:
li: nth-child(2){
	color: pink;
}

Agora, a Criança2 será rosa. Entretanto, todas as crianças do tipo li
da página também serão, então, considere usar uma classe ou id se quiser
deixar isso individual

Por fim, temos o only-child, que usamos quando só há uma child na nossa tag/página
Com isso, evitamos a fadiga.

Exemplo:

<ul>	//parent
	<li>Criança</li> 	//only-child
</ul>


No CSS fica:

li: only-child{
	color:white;
}


Temos também pseudoselectors para tags ancor (<a>), como o link e o visited

Usando o link, setamos atributos como por ex sua cor quando o link não foi aberto.

Já o visited faz o mesmo, mas pra quando foi aberto.

Exemplo:

#google-link: link{
	color: blue;
}

#google-link: visited{
	color: red;
}



Advanced Selectors


Primeiramente, para formatar alguma tag a partir de uma
parent que a precede, basta chamarmos a anterior e a que 
queremos formatar após a anterior pelo resto da página.

Exemplo:

h2 + a{
	color: red;
}

Nesse exemplo, apenas as tags <a> precedidas de h2 serão
formatadas em vermelho.


Agora, se queremos formatar uma tag que não é precendida
por sua parent, temos que mudar um pouco a notação, como abaixo:

textarea ~ button{
	color: purple;
}

Aqui, ambas textarea e button são childs de h2,
mas textarea precede button e queremos formatar esse 
último.

Assim, usamos ~ ao invés de + para fazê-lo


Temos também - para o caso de multiplas childs dentro 
de um mesmo parent, podemos formatar todas; como em:

Exemplo:
//HTML
<ul>
	<li>child1</li>	//first-child
	<li>child2</li>	//second-child
	<a href = "www.google.com">Google</a>	//third-child
	<li>child3</li>	//child4 last-child
</ul>

//CSS

ul > li{
	color: gray;
}

Assim, todas essas childs, exceto <a> serão cinza


Podemos também formatar childs dentro da child da parent principal
com um dado selector; mas falando assim é difícil, então temos um ex:

//HTML
<ul> //Paizão
	<li>child1</li>	//first-child
	<li>child2</li>	//last-child	//Paizinho
		<ol>
			<li>1</li>	//Child do paizinho
			<li>2</li>	//Child do paizinho
		</ol>
</ul>


//CSS
ul li{
	color: green;
}

Agora, todos os elementos de li pra baixos serão verdes



Attribute Selectors

Podemos estilizar não só tags, mas atributos também, como por exemplo imagens:

Digamos que temos 2 imagens em diferentes pontos da página e queremos formatar ambas
com uma borda preta


Pra isso, devemos primeiramente ver se ambas tem algo em comum.

Digamos então que estão ambas no mesmo diretório chamado img.

Assim, o que devemos fazer no css então é:


img[src^="../img/"]{
	border:10px solid black;
}


Aqui notamos já a estrutura dese tipo de selector, que consiste em abrir chaves após a tag 
em que estão contidos ser mencionada.

Dentro da chave, declaramos o nome do atributo e após 
a igualdade informamos o que queremos alterar desse atributo.

Como queremos editar imagens de um mesmo diretório, escrevemos
esse diretório como argumento. Porém, somente isso não vai formatá-las

É preciso estabelecer um operadorzinho após o nome do atributo para
selecionar ambas; que nesse caso foi o ^; que significa "todos".

Então, traduzindo a expressão ficaria: Na tag imagens, atributo src;
quero editar tudo (fotos nesse caso) que conste no diretório
/img/

Contudo, assim como podemos selecionar geral, ser mais específicos
e selecionar arquivos que terminem em algum nome me comum.

img[src$="../img/ele"]{
	border:10px solid black;
}

Traduzindo a expressão: Na tag imagem, atributo src eu não quero
dar borda preta pra ninguém que esteja na pasta que não 
tenha seu nome terminado em "ele".


Por fim, temos como selecionar todos os arquivos que contenham algo em comum
com o *.

img[src*="../img/"]{
	border:10px solid black;
}

Assim, todos com img no diretório poderão ganhar a borda.


Temos outro selector muito legal que basicamente nos permite
diferenciar a formatação de classes e ids de uma maneira mais 
específica.

Por exemplo, eu posso ter meus subtítulos formatados 
com uma dada cor, mas eu quero mudar a cor de um deles
em especial para destaca-lo por algum motivo.


O problema é que todos esses subtítulos estão na mesma classe,
então na teoria eu teria que criar uma classe separada
ou um style só pra ele.


Só que eu também posso usar o seletor de atributos pra isso,
desde que eu tenha um argumento que diferencie
o subtítulo que eu quero dos demais.

Pra isso, eu devo ir na classe do HTML e - caso não tenha - 
criar um argumento para ela, tipo:


<h2 class="subtitle article-subtitle">Título principal</h2>

Note que eu dei um espaço no nome da classe e depois inseri mais texto

Esse espaço pode ser entendido como um parêntese fechado onde o que vem
depois do espaço é o conteúdo desse parêntese, ou seja, o argumento.

Agora, conseguimos diferenciar essa classe das demais de mesmo nome.

Então, vamos pro CSS formatá-la:

h2[class~=article-subtitle]{
	background: yellow;
}

Como dito antes, estamos editando um atributo do nosso h2,
que nesse classo é a classe; só que com o diferencial de
ser um elemento especificado por argumento que as demais 
não têm (pq eu n botei).

Pra isso, bastou colocar ~= seguido do argumento para fazer funcionar

Podemos fazer essa mesma coisa com |= no lugar de ~=.

Fazemos isso porque no mundo corporativo, esbarramos em 

classes ou ids desse tipo:

<h2 class="subtitle subtitle-03"></h2>
<h2 class="subtitle subtitle-04"></h2>
<h2 class="subtitle subtitle-05"></h2>
<h2 class="subtitle subtitle-13"></h2>

e por causa disso, queremos o que está depois do hífen; 
então fazemos essa troca.

h2[class|=subtitle-13]{
	background: yellow;
}


Types of colors

Tem um color picker no Google, só pesquisar: é bem útil


No Hex code cada bloco dos 6 digitos (2 digitos por bloco)
representa, respectivamente, RED; GREEN; BLUE. 
Vale tambémn mencionar que o código hexadecimal vai de
0 até f, sendo 0 o ausência de cor e f a cor pura.

Por exemplo, para saber uma das cores puras do RGB basta
zerar os blocos indesejados e estourar o desejado.

Azul Puro:
Red:00
Green:00
Blue:ff

Código hex:
0000ff


Branco:
ffffff

Preto:
000000


No RGB o mínimo é 0 e o máximo é 255.



Coloring Text

Recomenda-se usar o RGB ao invés do hex pela possibilidade de edição futura



Background Colors

Geralmente colocamos as tags do CSS no topo do código
e as classes/ids abaixo


Para colorir o background podemos usar a propriedade
background que permite desde cores a fotos, ou somente bacground-color 
se só formos trabalhar com cores.



Images/URL's in CSS

Para adiconar uma imagem, basca copiar o endereço da 
mesma no google e na propriedade background chamar a função
url() e colar o link lá dentro.

Sim url(""), assim como rgb() é uma função do CSS


Podemos fazer o mesmo com imagens locais, basta colar 
o pathing no local da url.


Podemos ser mais específicos e, assim como background-color, usar
background-image como a propriedade pra setar um bg de imagem;  
lembrando sempre de chamar a função url("").



Other Background Properties

pra repetir a imagem do bg, usamos a propriedade 
background-repeat e setamos como repeat ou no-repear (caso 
não quisermos a repetição);

Ex:

#service-image{
	height:400px
	width: 70%

	background: url("../img/umg-2.jpg");
	background-repeat: no-repeat;
}


Quando colocamos no-repeat podemos nos deparar com a 
imagem ocupando menos espaço do que deveria.

Para verificar isso, basta adicionar uma cor ao fundo 
na tag id/classe pra ver se a imagem sobrepõe a cor
ou se sobra espaço colorido.

Se for o segundo caso, teremos que ajustar a imagem.

Dito isso, usamos backgroun-size pra contornar esse problema.

No background-size, o primeiro argumento é o height e o segundo 
é o weitgh, mas ao declarar seus valores não precisamos
chamá-los.

Exemplo:
#service-image{
	height:400px
	width: 70%

	background: url("../img/umg-2.jpg");
	background-repeat: no-repeat;
	backgroud-size: 50px 100px;
}


As medidas podem ser em % também, que no caso corresponde ao total da
imagem que será usado (dependendo, ela será cortada ou duplicará[parcial
ou totalmente]).


Mas temos uma maneira menos chata de fazer isso, basta usar
o cover no argumento:

Exemplo:
#service-image{
	height:400px
	width: 70%

	background: url("../img/umg-2.jpg");
	background-repeat: no-repeat;
	backgroud-size: cover;
}

Agora ela encaixará certinho na moldura.


Podemos usar o contain também pra fazer isso mas as 
proporções podem não ser as desejadas.


Exemplo:
#service-image{
	height:400px
	width: 70%

	background: url("../img/umg-2.jpg");
	background-repeat: no-repeat;
	backgroud-size: contain;
}




Opacity/Transparency

Podemos manipular o rgb levando opacidade e transparência
em consideração.

Para tal, temos que trocar a função de rgb para rgba.

Essa mudança permitirá a adição de mais um argumento após o blue.

Esse valor pode ir de 0 a 1 e é chamado alpha.

0 remete à tranparente e 1 opaco 

Exemplo:
#service-image{
	height:400px
	width: 70%

	background: url("../img/umg-2.jpg");
	backgroud-size: contain;
	background-color: rgba(204, 229, 255, 3);
}




Gradients

Temos dois tipos de gradiente: Linear e Radial.

Exemplo:
#service-image{
	height:400px
	width: 70%


	background: linear-gradient (to );	//Linear
	background: radial-gradient ( ); //Radial
	backgroud-size: contain;
}

Nos argumento, definimos as 4 posições, sendo elas:
Top
Botton
Right
Left



Exemplo:

#service-image{
	height:400px
	width: 70%


	background: linear-gradient (to right red, green, blue);	//Linear
	backgroud-size: contain;
}


Uma boa ideia é usar rgb e rgba pra dar efeito de fade.

Exemplo:
#service-image{
	height:400px
	width: 70%


	background: linear-gradient (to right rgb(94, 225, 126), rgba (94, 255, 126. 0);	//Linear
	backgroud-size: contain;
}

O resultado será uma cor rgb seguida dela mesma transparente (argumento alpha = 0).


Posso botar mais de uma direção nos argumentos, pra fazer - por exemplo - uma diagonal.

Exemplo:
#service-image{
	height:400px
	width: 70%


	background: linear-gradient (to botton right rgb(94, 225, 126), rgba (94, 255, 126. 0);	//Linear
	backgroud-size: contain;
}

Assim teremos uma diagonal na direita.


Podemos manipular as posições com ângulos também.

Exemplo:
#service-image{
	height:400px
	width: 70%


	background: linear-gradient (-90deg rgb(94, 225, 126), rgba (94, 255, 126. 0);	//Linear
	backgroud-size: contain;
}

Invertendo 90°, fazemos com que a figura inverta horizontalmente.

A propósito, o ângulo deve ser acompanhado do deg que significa degrees (graus).


No radial, nós basicamente especificamos o quanto de cada cor queremos
em porcentagem.


Há também dois tipos de radial: elipse (default) e circle.

Basta declarar (caso queira o não default) como argumento inicial.


Exemplo:
#service-image{
	height:400px
	width: 70%


	background: radial-gradient (circle, red 20%, blue 40%, green 55%);	//Radial
	backgroud-size: contain; // isso aqui não funcional no radial, remova!
}



Introduction to Types of Units

Temos dois tipos de medidas: Absolute Units and Relative Units



Absolute Units são as medidas normais que conhecemos (bem como o px) e as relatives são 
medidas que dependem de seu parent (%).

Um exemplo disse é o %, que redimensiona uma imagem baseado no partent dela.

Se por exemplo seu parent for o body, e setarmos uns 70%
pra width ou height, nossa imagem só ocupará 70% da página (body),
não importando se a mesma foi redimensionada.


Medidas relativas são muito boas pra design responsivo,
pois ajudam na portabilidade da página (pc/tv/celular/etc).


Apesar dos pixels (px) serem uma medida absoluta, elas meio que são
relativas, pois o display final vai depender da resolução da minha tela.

Usamos o DPI pra calcular a resolução da tela.

Outra medida absoluta é o centímetro (cm), que redimenciona
o conteúdo de maneira que a medida colocada será a mesma 
se você pegar uma régua e colocar na tela do pc.

Temos também como medida absoluta o points (pt), que é um pouco
maior que o pixel.

Temos ainda o pc, que é maior que o pt e o px. 1pc = 12pt.


Hierarquia do p nas medidas absolutas (maior para o menor):
pc
|
pt
|
px

 
 Uma outra medida relativa é o "em", responsável por 
multiplicar a fonte padrão da tag.

Por exemplo: 

body{
 	font-size:2em; //dobra o tamanho da fonte
}


pesquisar sobre viewport


Temos medidas que se baseam no viewport (tamanho do body ou do html) e são relativas:
(vh) --> stands for viewport height
(vw) --> stands for viewport weight

Essa medidas, quando acompanhadas do número, multiplicam 
altura e/ou largura em relação ao viewport.


Text Manipulation

A primeira propriedade que podemos usar é a text-decoration: none
que serve pra remover elementos que independem da fonte
(sublinhado, rasurado, tipo [upper, lower, capitalize], etc) 
quando  none for seu atributo. 

Geralmente a usamos com links pra remover o sublinhado
padrão.


Podemos usar a mesma propriedade para setar esses elementos
independetes.

Exemplo:

.link{
	text-decoration: underline; //sublinha
	text-decoration: line-through;	//rasura
	text-decoration: overline;	//sobrelinha
}

temos também uma propriedade muito útil quando
queremos alternar de uppercase, pra lower ou captalizado.

*capitalizado é deixar a primeira letra de cada palavra maiúscula.

Para isso, usamos a text-transform; como no exemplo abaixo.

Exemplo:

body{
	text-transform: capitalize;	//capitaliza
	text-transform: uppercase;	//upper
	text-transform: lowercase;	//lower
}

Para alinhar nosso texto, basta usar o text-align, como abaixo:


Exemplo:


body{
	text-transform: capitalize;	//capitaliza
	text-align: center;
	text-align: left;
	text-align: right;
	text-align: justify;
}

Font Size, Bolding & Style


Procure usar medidas relativas no font-size.

Exemplo:

body{
	text-transform: capitalize;	//capitaliza
	text-align: center;
	font-size: 1.15em;	
	/*
	 aqui usamos uma media
	 relativa e espertamente escolhemos um valor inferior
	 a dois pois 2 é o valor default da tag <h> então
	 se colcoarmos mais que dois o cabeçalho será igual 
	 ao texto
	*/
	text-align: right;
	text-align: justify;
}


Já para deixar em negrito usamos font-weight. Contudo
vale o aviso de que algumas fontes só suportam valores
até 800 ou 900; depois disso nada muda. Portanto, atribua
valores de 0 até mais ou menos esse limite.

basicamente font-weight vai definir o quão grosso será
o seu negrito.

Geralmente usamos 100.

Exemplo:

#title{
	font-weight: 100;
}


Para deixar em itálico, nós usamos a propriedade font-style.

Exemplo:

.italics{
	font-style: italic;
	font-style: oblique; //deixa um pouco mais itálico
}




Font Families

Existem 3 tipos principais de Font Families: 
Serif, Sans-Serif e Monospace.

As serif são usadas geralmente em artigos acadêmicos.
São conhecidas por pequenas pontas na fonte (é pontudo).

Agora, as Sans-Serif se diferem da serif por não serem 
pontiagudas.

Exemplo no CSS:

body{
	font-family: sans-serif;
	font-family: serif;
	font-family: monospace;
}


Podemos também trabalhar com alternativas caso nossa fonte
não esteja disponível.

Exemplo:

body{
	font-family: "Times New Roman", sans-serif;
}

O que acontece acima é que, se a Times não estiver disponível
o argumento 2 que fica após a vírgula será aplicado à página.



Including External Fonts w/Google Fonts

Pra buscar uma fonte, podemos ir em fonts.google.com

Pra escolher uma fonte, clicamos no + e abrimos uma janela
com o código CSS e HTML pra serem usados.


Geralmente escolhemos duas fontes pra incluir: uma pro texto
e outra pra títulos.


Using External Fonts

Pra importar, devemos copiar o link HTML do google fonts
e colar o código no head para depois podermos colar
o código CSS lá no nosso arquivo de CSS.



The CSS Box Modle (2:49:07)

Voltar nesse tempo caso não tenha entendido a teoria.



Changing Content Size

Geralmente determinamos as medidas do height com uma medida
relativa.

Já o width - visando responsividade - deve ser relativo.

Se eu for no dev tools do browser e clicar no tablet com o celular
(segundo ícone da esquerda pra direita) e clicar no 
primeiro texto de opções que aparecer no topo da página
eu posso ver como é o viewport da minha página em outros
dispositivos.

Se eu selecionar o Responsive, eu posso redimensionar meu
viewport



CSS Borders

Apesar de não vermos, temos bordas em tudo, desde textos
a imagens. 

Dito isso, podemos estilizar essas bordas se for de nosso
agrado com a propriedade border.

Estrutura básica: border: size style color;


Geralmente o tamanho fica entre 1 e 3 px.

O estilo remete ao tipo de borda (serrilhada, sólida, etc)

Exemplo:

img{
	border: 2px solid blue;	//solido
	border: 2px dotted blue; // pontilhado
	border: 2px dashed blue; //parece o pontilhado mas não é
	border: 2px double blue; //dupla borda
}



Margin & Padding

O padding serve pra afastar em relação à borda, a depender
do valor do argumento.

No caso, se eu não especificar a direção (botton, top,
left, right) ele vai aplicar o padding em tudo igual.


Já no caso da Margem, o conteúdo se afasta da mesma, levando
por exemplo a borda consigo.

Exemplo:

img{
	padding: 40px; //padding em tudo
	padding-bottom:100px	//só abaixo
	padding-top:5px	//só acima
	padding-right:12px	//só na direita
	padding-left:30px;	//só na esquerda

	//margem
	marging: 40px; //marging em tudo
	marging-bottom:100px	//só abaixo
	marging-top:5px	//só acima
	marging-right:12px	//só na direita
	marging-left:30px;	//só na esquerda
}


Podemos encurtar esse código e economizar linhas.

Notação curta: 
margin/padding: top value right value botton value left value;


Se eu usar apenas dois argumentos, eu estarei formatando top e right
de uma mesma maneira e left botton de outra mesma maneira.


Float & Display Types

O float manda nosso elemento pra algum lado da página
e com isso abre espaço pra tudo que está abaixo se 
readequear.

Exemplo: 

img{
	float: right;
}

Com o disply podemos simplesmente nos livrar
de algo na página de maneira a readequar
os demais elementos pra preencher o espaço
deixado.

Exemplo:

.table{
	display: none;
}

temos também: 
display inline;
display inline-block; //fusão de inline com block

Pesquisar mais sobre


Podemos também dar o atributo inheret pro float e também o 
none, que é o default.




What is Flexbox?

Flexbox stands for 'flexible box'.

É um tipo de display que vem com o alcance de propriedades
permitindo arrangar itens facilmente.

É uma alternativa às propriedades de display, float e outras.

Display: flex;

Um elemento Flexbox é dividido em duas partes principais: 
container e itens.

O contaiuner é o elemento parent  no qual o display é ativo.
Isso geralmente é um div.

Já os itens são childs do container e compõem o conteúdo 
da box.


Creating a Flex Container
Basta digitar display: flex;



Flex Direction & Wrap

Pra começar, vamos trabalhar com a direção (vertical/horiozontal)

Por padrão, começaremos com a horizontal.

Contudo, podemos redefinir a orientação com a propriedade
flex-direction: column; //ficará na vertical
flex-direction: row;	//é o default e está na horizontal


Podemos também flipar nosso conteúdo, isso é, mudar a ordem
de display.

Para isso, acrescentamos o sufixo reverse no flexdirection.

flex-direction: column-reverse;

Agora, tratando do wrap, que é uma propriedade de quebra de linha,
nós a usamos quando queremos que nossos elementos caiam 
para a linha ou coluna seguinte, de forma a estilizar 
a página.

Assim, usamos o seguinte código:

flex-wrap: wrap;

Podemos também inverter a ordem do wrap com o sufixo 
reverse, como abaixo:

flex-wrap: wrap-reverse;

A propósito, podemos tirar o wrap com o nowrap, que é o
valor padrão dessa propriedade. Felizmente não é comum.



Content Alignment

Para alinharmos o conteúdo, usamos a propriedade justify-content.

Essa propriedade recebe 3 atributos; sendo eles:

flex-start -> corresponde ao lugar de origem do flex (esquerda default)
flex-end -> corresponde ao oposto do start (direita default)
center -> alinha ao meio

Temos também dois argumento especiais:

space-between -> Cria espaços entre os itens de forma a 
preencher todo o espaço do flex.

space-around -> Aqui os espaços também são criados mas dessa vez
há espaço esntre a borda do flex o o inicio/fim.

O justify é pra alinhamento vertical.


Agora, para o horizontal usamos align-itens.

Os atributos ainda são os mesmos do justify; com exceção
dos especiais.

Aqui os especiais são: 

stretch  -> Alinha todo mundo do topo ao fundo do flex.

baseline -> Todos os elementos serão alinhados, independete
da diferença na formatação (ex: tamanho).



Flex Item Order

Pra ordernar um/alguns flex item/s nós vamos na 
classe/id que o/os conte/ê/m e criamos um atributo style
com a componente order e simplesmente enumeramos a ordem
que queremos exibir.

Então, basta irmos no HTML e colocar isso lá.

Exemplo:

<div class="container">
    <div class="container-item" style ="order: 4;"> A</div>
    <div class="container-item" style ="order: 3;"> B</div>
    <div class="container-item" style ="order: 5;"> C</div>
    <div class="container-item" style ="order: 1;"> D</div>
    <div class="container-item" style ="order: 2;"> E</div>
</div>


Vale lembrar que pra não perder tempo inserindo um style
por vez, posso inserir vários de uma vez no vs code
se segurar ctrl+alt+(seta pra baixo ou pra cima, vai depender
se tu quer inserir pra cima ou pra baixo).

Cada vez que eu apertar isso eu ganho um cursor.

Pra tirar os cursores é só apertar alt.




Shrink, Grow & Basis

Primeiramente, o basis é responsável
por estabelecer um valor mínimo de tamanho 
para os elementos flex.

Já o grow é responsável pelo tamanho deles.
Ele deve ser inserido em todos os elemento do flex
e é recomendável preencher todos com valores, pois
seu default é 0, o que - ao atribuir valor a um(s) -
vai gerar um problema com o tamanho.

No caso, o argumento para grow é quantas vezes do default
deve ser multiplicado para obter o tamanho.

Isso é importante pra manter a responsividade do site quando
a tela é reduzida ou expandida, mantendo as proporções.

Entretanto, se ela for reduzida pra menos do valor base (basis)
a proporção vai de vala e é aí que entra o shrink.

Ele estabelecerá as proporções quando o encolhimento
ocorrer.

O valor base do shrink é 1.


Se eu setar o shrink pra 0, ele não vai 
encolher nosso elemento mesmo se dermos zoon-out.	 



Exemplo:


<div class="container">
    <div class="container-item" style ="order: 4;
    flex-grow:  1;
    flex-shrink:   1;
    flex-basis: 100px;
"> A</div>
    <div class="container-item" style ="order: 3;
    flex-grow:  1;
    flex-shrink:   3;	//vai encolher 3x mais o valor base por zoon-out;
    flex-basis: 100px;
"> B</div>
    <div class="container-item" style ="order: 5;
    flex-grow:  5;	//vai crescer 5x o valor base no zoon-in;
    flex-shrink:   1;
    flex-basis: 100px;
"> C</div>
    <div class="container-item" style ="order: 1;
    flex-grow:  1;
    flex-shrink:   0;	//não vai diminuir no zoon-out;
    flex-basis: 100px;
"> D</div>
    <div class="container-item" style ="order: 2;
    flex-grow:  1;
    flex-shrink:   1;
    flex-basis: 100px;
"> E</div>
</div>



The 'flex' Property

Agora é a hora de se sentir idota porque dava pra
fazer tudo isso na mesma linha kkkkkkkkkkkkkkk.

basicamente, a propriedade flex recebe três atributos
como argumento, os quais remetem a grow shrink e basis.

flex: grow shrink basis;

Exemplo: 
flex: 1 1 100px;


Item Alignment

Ao alinhar individualmente cada item flex, daremos
override no align-itens se tivermos usado o mesmo antes.

Para alinha individualment, usamos o align-self lá no elemento
que está no html dentro do style.

Podemos alinhar - novamente - em:
center
flex-star 
flex-end

assim, nosso código pode ser:

<div style="align-self: flex-start;">A</div>


																																																																																																											








